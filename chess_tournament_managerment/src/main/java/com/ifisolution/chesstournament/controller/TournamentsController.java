/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:43 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.Tournaments;
import com.ifisolution.chesstournament.service.TournamentsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*", maxAge = 4200)
@RequestMapping(value = "/tournaments", produces = "application/hal+json")
public class TournamentsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(TournamentsController.class);

	private static final String NOT_FOUND ="Tournaments not found";

	@Autowired
	private TournamentsService tournamentsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Tournaments> findAll() {
		List<Tournaments> list = tournamentsService.findAll();
		return list;
	}


	@GetMapping("{tournamentId}")
	public Tournaments get(@PathVariable("tournamentId") Integer tournamentId) {
		final Tournaments tournaments = tournamentsService.getOne(tournamentId);
		LOGGER.info("Tournaments found : {}", tournaments);
		return tournaments;
	}

	@PostMapping(consumes = "application/json")
	public Tournaments create(@RequestBody Tournaments tournaments) {
		LOGGER.info("Tournaments creation request : {}", tournaments);
		if (tournamentsService.exist(tournaments)) {
			LOGGER.info("Tournaments already exist ! : {}", tournaments);
			return null;
		} else {
			final Tournaments created = tournamentsService.create(tournaments);
			LOGGER.info("Created tournaments {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public Tournaments update(@RequestBody Tournaments tournaments) {
		return tournamentsService.update(tournaments);
	}

	@DeleteMapping("{tournamentId}")
	public void delete(@PathVariable("tournamentId") Integer tournamentId) {
		LOGGER.info("Tournaments deletion request : {}", resolveIdForLogger(tournamentId));
		if (tournamentsService.delete(tournamentId)) {
			LOGGER.info("Tournaments succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer tournamentId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(tournamentId));
		return ids.toString();
	}

}


