/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.TournamentOrganizers;
import com.ifisolution.chesstournament.service.TournamentOrganizersService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/tournamentOrganizers", produces = "application/hal+json")
public class TournamentOrganizersController {

	private static final Logger LOGGER = LoggerFactory.getLogger(TournamentOrganizersController.class);

	private static final String NOT_FOUND ="TournamentOrganizers not found";

	@Autowired
	private TournamentOrganizersService tournamentOrganizersService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<TournamentOrganizers> findAll() {
		List<TournamentOrganizers> list = tournamentOrganizersService.findAll();
		return list;
	}


	@GetMapping("{organizerId}")
	public TournamentOrganizers get(@PathVariable("organizerId") Integer organizerId) {
		final TournamentOrganizers tournamentOrganizers = tournamentOrganizersService.getOne(organizerId);
		LOGGER.info("TournamentOrganizers found : {}", tournamentOrganizers);
		return tournamentOrganizers;
	}

	@PostMapping(consumes = "application/json")
	public TournamentOrganizers create(@RequestBody TournamentOrganizers tournamentOrganizers) {
		LOGGER.info("TournamentOrganizers creation request : {}", tournamentOrganizers);
		if (tournamentOrganizersService.exist(tournamentOrganizers)) {
			LOGGER.info("TournamentOrganizers already exist ! : {}", tournamentOrganizers);
			return null;
		} else {
			final TournamentOrganizers created = tournamentOrganizersService.create(tournamentOrganizers);
			LOGGER.info("Created tournamentOrganizers {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public TournamentOrganizers update(@RequestBody TournamentOrganizers tournamentOrganizers) {
		return tournamentOrganizersService.update(tournamentOrganizers);
	}

	@DeleteMapping("{organizerId}")
	public void delete(@PathVariable("organizerId") Integer organizerId) {
		LOGGER.info("TournamentOrganizers deletion request : {}", resolveIdForLogger(organizerId));
		if (tournamentOrganizersService.delete(organizerId)) {
			LOGGER.info("TournamentOrganizers succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer organizerId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(organizerId));
		return ids.toString();
	}

}


