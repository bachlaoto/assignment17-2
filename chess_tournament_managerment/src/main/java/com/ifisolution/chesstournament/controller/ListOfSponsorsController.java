/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.ListOfSponsors;
import com.ifisolution.chesstournament.service.ListOfSponsorsService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/listOfSponsors", produces = "application/hal+json")
public class ListOfSponsorsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ListOfSponsorsController.class);

	private static final String NOT_FOUND ="ListOfSponsors not found";

	@Autowired
	private ListOfSponsorsService listOfSponsorsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<ListOfSponsors> findAll() {
		List<ListOfSponsors> list = listOfSponsorsService.findAll();
		return list;
	}


	@GetMapping("{sponsorId}")
	public ListOfSponsors get(@PathVariable("sponsorId") Integer sponsorId) {
		final ListOfSponsors listOfSponsors = listOfSponsorsService.getOne(sponsorId);
		LOGGER.info("ListOfSponsors found : {}", listOfSponsors);
		return listOfSponsors;
	}

	@PostMapping(consumes = "application/json")
	public ListOfSponsors create(@RequestBody ListOfSponsors listOfSponsors) {
		LOGGER.info("ListOfSponsors creation request : {}", listOfSponsors);
		if (listOfSponsorsService.exist(listOfSponsors)) {
			LOGGER.info("ListOfSponsors already exist ! : {}", listOfSponsors);
			return null;
		} else {
			final ListOfSponsors created = listOfSponsorsService.create(listOfSponsors);
			LOGGER.info("Created listOfSponsors {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public ListOfSponsors update(@RequestBody ListOfSponsors listOfSponsors) {
		return listOfSponsorsService.update(listOfSponsors);
	}

	@DeleteMapping("{sponsorId}")
	public void delete(@PathVariable("sponsorId") Integer sponsorId) {
		LOGGER.info("ListOfSponsors deletion request : {}", resolveIdForLogger(sponsorId));
		if (listOfSponsorsService.delete(sponsorId)) {
			LOGGER.info("ListOfSponsors succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer sponsorId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(sponsorId));
		return ids.toString();
	}

}


