/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.RefRankingCodes;
import com.ifisolution.chesstournament.service.RefRankingCodesService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*", maxAge = 4200)
@RequestMapping(value = "/refRankingCodes", produces = "application/hal+json")
public class RefRankingCodesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefRankingCodesController.class);

	private static final String NOT_FOUND ="RefRankingCodes not found";

	@Autowired
	private RefRankingCodesService refRankingCodesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefRankingCodes> findAll() {
		List<RefRankingCodes> list = refRankingCodesService.findAll();
		return list;
	}


	@GetMapping("{rankingCode}")
	public RefRankingCodes get(@PathVariable("rankingCode") Integer rankingCode) {
		final RefRankingCodes refRankingCodes = refRankingCodesService.getOne(rankingCode);
		LOGGER.info("RefRankingCodes found : {}", refRankingCodes);
		return refRankingCodes;
	}

	@PostMapping(consumes = "application/json")
	public RefRankingCodes create(@RequestBody RefRankingCodes refRankingCodes) {
		LOGGER.info("RefRankingCodes creation request : {}", refRankingCodes);
		if (refRankingCodesService.exist(refRankingCodes)) {
			LOGGER.info("RefRankingCodes already exist ! : {}", refRankingCodes);
			return null;
		} else {
			final RefRankingCodes created = refRankingCodesService.create(refRankingCodes);
			LOGGER.info("Created refRankingCodes {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public RefRankingCodes update(@RequestBody RefRankingCodes refRankingCodes) {
		return refRankingCodesService.update(refRankingCodes);
	}

	@DeleteMapping("{rankingCode}")
	public void delete(@PathVariable("rankingCode") Integer rankingCode) {
		LOGGER.info("RefRankingCodes deletion request : {}", resolveIdForLogger(rankingCode));
		if (refRankingCodesService.delete(rankingCode)) {
			LOGGER.info("RefRankingCodes succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer rankingCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(rankingCode));
		return ids.toString();
	}

}


