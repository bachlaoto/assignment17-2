/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.Matches;
import com.ifisolution.chesstournament.service.MatchesService;

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/matches", produces = "application/hal+json")
public class MatchesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(MatchesController.class);

	private static final String NOT_FOUND ="Matches not found";

	@Autowired
	private MatchesService matchesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Matches> findAll() {
		List<Matches> list = matchesService.findAll();
		return list;
	}


	@GetMapping("{matchStarDatetime}/{playerId1}/{tournamentId}/{playerId2}")
	public Matches get(@PathVariable("matchStarDatetime") Date matchStarDatetime, @PathVariable("playerId1") Integer playerId1, @PathVariable("tournamentId") Integer tournamentId, @PathVariable("playerId2") Integer playerId2) {
		final Matches matches = matchesService.getOne(matchStarDatetime, playerId1, tournamentId, playerId2);
		LOGGER.info("Matches found : {}", matches);
		return matches;
	}

	@PostMapping(consumes = "application/json")
	public Matches create(@RequestBody Matches matches) {
		LOGGER.info("Matches creation request : {}", matches);
		if (matchesService.exist(matches)) {
			LOGGER.info("Matches already exist ! : {}", matches);
			return null;
		} else {
			final Matches created = matchesService.create(matches);
			LOGGER.info("Created matches {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public Matches update(@RequestBody Matches matches) {
		return matchesService.update(matches);
	}

	@DeleteMapping("{matchStarDatetime}/{playerId1}/{tournamentId}/{playerId2}")
	public void delete(@PathVariable("matchStarDatetime") Date matchStarDatetime, @PathVariable("playerId1") Integer playerId1, @PathVariable("tournamentId") Integer tournamentId, @PathVariable("playerId2") Integer playerId2) {
		LOGGER.info("Matches deletion request : {}", resolveIdForLogger(matchStarDatetime, playerId1, tournamentId, playerId2));
		if (matchesService.delete(matchStarDatetime, playerId1, tournamentId, playerId2)) {
			LOGGER.info("Matches succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Date matchStarDatetime, Integer playerId1, Integer tournamentId, Integer playerId2) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(matchStarDatetime));
		ids.append("/");
		ids.append(String.valueOf(playerId1));
		ids.append("/");
		ids.append(String.valueOf(tournamentId));
		ids.append("/");
		ids.append(String.valueOf(playerId2));
		return ids.toString();
	}

}


