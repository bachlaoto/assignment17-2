/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.RefResultCodes;
import com.ifisolution.chesstournament.service.RefResultCodesService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*", maxAge = 4200)
@RequestMapping(value = "/refResultCodes", produces = "application/hal+json")
public class RefResultCodesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefResultCodesController.class);

	private static final String NOT_FOUND ="RefResultCodes not found";

	@Autowired
	private RefResultCodesService refResultCodesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefResultCodes> findAll() {
		List<RefResultCodes> list = refResultCodesService.findAll();
		return list;
	}


	@GetMapping("{resultCode}")
	public RefResultCodes get(@PathVariable("resultCode") Integer resultCode) {
		final RefResultCodes refResultCodes = refResultCodesService.getOne(resultCode);
		LOGGER.info("RefResultCodes found : {}", refResultCodes);
		return refResultCodes;
	}

	@PostMapping(consumes = "application/json")
	public RefResultCodes create(@RequestBody RefResultCodes refResultCodes) {
		LOGGER.info("RefResultCodes creation request : {}", refResultCodes);
		if (refResultCodesService.exist(refResultCodes)) {
			LOGGER.info("RefResultCodes already exist ! : {}", refResultCodes);
			return null;
		} else {
			final RefResultCodes created = refResultCodesService.create(refResultCodes);
			LOGGER.info("Created refResultCodes {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public RefResultCodes update(@RequestBody RefResultCodes refResultCodes) {
		return refResultCodesService.update(refResultCodes);
	}

	@DeleteMapping("{resultCode}")
	public void delete(@PathVariable("resultCode") Integer resultCode) {
		LOGGER.info("RefResultCodes deletion request : {}", resolveIdForLogger(resultCode));
		if (refResultCodesService.delete(resultCode)) {
			LOGGER.info("RefResultCodes succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer resultCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(resultCode));
		return ids.toString();
	}

}


