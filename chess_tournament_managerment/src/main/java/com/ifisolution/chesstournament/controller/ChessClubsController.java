/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.controller;

import com.ifisolution.chesstournament.entity.ChessClubs;
import com.ifisolution.chesstournament.service.ChessClubsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*", maxAge = 4200)
@RequestMapping(value = "/chessClubs", produces = "application/hal+json")
public class ChessClubsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ChessClubsController.class);

	private static final String NOT_FOUND ="ChessClubs not found";

	@Autowired
	private ChessClubsService chessClubsService;

	@GetMapping(value = "/"
			, produces = {MediaType.APPLICATION_JSON_VALUE}
	)
	public List<ChessClubs> findAll() {
//		List<ChessClubs> list = chessClubsService.findAll();
//		return list;
		return chessClubsService.findAll();
	}


	@GetMapping("{clubId}")
	public ChessClubs get(@PathVariable("clubId") Integer clubId) {
		final ChessClubs chessClubs = chessClubsService.getOne(clubId);
		LOGGER.info("ChessClubs found : {}", chessClubs);
		return chessClubs;
	}

	@PostMapping(consumes = "application/json")
	public ChessClubs create(@RequestBody ChessClubs chessClubs) {
		LOGGER.info("ChessClubs creation request : {}", chessClubs);
		if (chessClubsService.exist(chessClubs)) {
			LOGGER.info("ChessClubs already exist ! : {}", chessClubs);
			return null;
		} else {
			final ChessClubs created = chessClubsService.create(chessClubs);
			LOGGER.info("Created chessClubs {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public ChessClubs update(@RequestBody ChessClubs chessClubs) {
		return chessClubsService.update(chessClubs);
	}

	@DeleteMapping("{clubId}")
	public void delete(@PathVariable("clubId") Integer clubId) {
		LOGGER.info("ChessClubs deletion request : {}", resolveIdForLogger(clubId));
		if (chessClubsService.delete(clubId)) {
			LOGGER.info("ChessClubs succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer clubId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(clubId));
		return ids.toString();
	}

}


