/*
 * Created on 2018-10-06 ( Date ISO 2018-10-06 - Time 10:44:39 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package com.ifisolution.chesstournament.service;


import com.ifisolution.chesstournament.entity.ActualTournamentSponsors;
import com.ifisolution.chesstournament.entity.ActualTournamentSponsorsId;
import com.ifisolution.chesstournament.repository.ActualTournamentSponsorsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

@Service
@Transactional
public class ActualTournamentSponsorsServiceImpl implements ActualTournamentSponsorsService {

    @Autowired
    private ActualTournamentSponsorsRepository actualTournamentSponsorsRepository;

    @Override
    public ActualTournamentSponsors getOne(Integer sponsorId, Integer tournamentsId) {
        ActualTournamentSponsorsId actualTournamentSponsorsId = new ActualTournamentSponsorsId();
        actualTournamentSponsorsId.setSponsorId(sponsorId);
        actualTournamentSponsorsId.setTournamentId(tournamentsId);
        return actualTournamentSponsorsRepository.findById(actualTournamentSponsorsId).get();
    }

    @Override
    public Boolean delete(Integer sponsorId, Integer tournamentsId) {
        ActualTournamentSponsorsId actualTournamentSponsorsId = new ActualTournamentSponsorsId();
        actualTournamentSponsorsId.setSponsorId(sponsorId);
        actualTournamentSponsorsId.setTournamentId(tournamentsId);
        if (actualTournamentSponsorsRepository.getOne(actualTournamentSponsorsId) != null) {
            actualTournamentSponsorsRepository.deleteById(actualTournamentSponsorsId);
            return true;
        }
        return false;
    }

    @Override
    public ActualTournamentSponsors create(ActualTournamentSponsors actualTournamentSponsors) {
        return actualTournamentSponsorsRepository.save(actualTournamentSponsors);
    }

    @Override
    public ActualTournamentSponsors update(ActualTournamentSponsors actualTournamentSponsorsToUpdate) {
        ActualTournamentSponsorsId actualTournamentSponsorsId = new ActualTournamentSponsorsId();
        actualTournamentSponsorsId.setSponsorId(actualTournamentSponsorsToUpdate.getId().getSponsorId());
        actualTournamentSponsorsId.setTournamentId(actualTournamentSponsorsToUpdate.getId().getTournamentId());
        ActualTournamentSponsors actualTournamentSponsors = actualTournamentSponsorsRepository.getOne(actualTournamentSponsorsId);

        return actualTournamentSponsorsRepository.save(actualTournamentSponsors);
    }

    @Override
    public Boolean exist(ActualTournamentSponsors actualTournamentSponsors) {
        ActualTournamentSponsorsId actualTournamentSponsorsId = new ActualTournamentSponsorsId();
        actualTournamentSponsorsId.setSponsorId(actualTournamentSponsors.getId().getSponsorId());
        actualTournamentSponsorsId.setTournamentId(actualTournamentSponsors.getId().getTournamentId());
        return actualTournamentSponsorsRepository.existsById(actualTournamentSponsorsId);
    }

    @Override
    public List<ActualTournamentSponsors> findAll() {
        return actualTournamentSponsorsRepository.findAll();
    }

    @Override
    public Page<ActualTournamentSponsors> findAll(Pageable pageable) {
        return actualTournamentSponsorsRepository.findAll(pageable);
    }
}





