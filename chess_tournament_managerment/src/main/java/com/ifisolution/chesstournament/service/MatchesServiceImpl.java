/*
 * Created on 2018-10-04 ( Date ISO 2018-10-04 - Time 22:45:22 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.service;


import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import com.ifisolution.chesstournament.entity.Matches;
import com.ifisolution.chesstournament.entity.MatchesId;
import com.ifisolution.chesstournament.repository.MatchesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Service
@Transactional
public class MatchesServiceImpl implements MatchesService {

	@Autowired
	private MatchesRepository matchesRepository;

	@Override
	public Matches getOne(Date matchStarDatetime, Integer playerId1, Integer tournamentId, Integer playerId2) {
		MatchesId matchesId = new MatchesId();
		matchesId.setMatchStarDatetime(matchStarDatetime);
		matchesId.setPlayerId1(playerId1);
		matchesId.setPlayerId2(playerId2);
		matchesId.setTournamentId(tournamentId);

		return matchesRepository.findById(matchesId).get();
	}

	@Override
	public Boolean delete(Date matchStarDatetime, Integer playerId1, Integer tournamentId, Integer playerId2) {
		MatchesId matchesId = new MatchesId();
		matchesId.setMatchStarDatetime(matchStarDatetime);
		matchesId.setPlayerId1(playerId1);
		matchesId.setPlayerId2(playerId2);
		matchesId.setTournamentId(tournamentId);
		if (matchesRepository.findById(matchesId).get() != null) {
			matchesRepository.deleteById(matchesId);
			return true;
		}
		return false;
	}

	@Override
	public Matches create(Matches matches) {
		return matchesRepository.save(matches);
	}

	@Override
	public Matches update(Matches matchesToUpdate) {
		MatchesId matchesId = new MatchesId();
		matchesId.setTournamentId(matchesToUpdate.getId().getTournamentId());
		matchesId.setPlayerId2(matchesToUpdate.getId().getPlayerId2());
		matchesId.setPlayerId1(matchesToUpdate.getId().getPlayerId1());
		matchesId.setMatchStarDatetime(matchesToUpdate.getId().getMatchStarDatetime());
		Matches matches = matchesRepository.findById(matchesId).get();

		if (matchesToUpdate.getRefResultCodes() != null) {

		}
		if (matchesToUpdate.getMatchEndDatetime() != null) {

		}
		return matchesRepository.save(matches);
	}

	@Override
	public Boolean exist(Matches matches) {
		MatchesId matchesId = new MatchesId();
		matchesId.setTournamentId(matches.getId().getTournamentId());
		matchesId.setPlayerId2(matches.getId().getPlayerId2());
		matchesId.setPlayerId1(matches.getId().getPlayerId1());
		matchesId.setMatchStarDatetime(matches.getId().getMatchStarDatetime());
		return matchesRepository.existsById(matchesId);
					}

	@Override
	public List<Matches> findAll() {
		return matchesRepository.findAll();
	}

	@Override
	public Page<Matches> findAll(Pageable pageable) {
		return matchesRepository.findAll(pageable);
	}
}





