/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package com.ifisolution.chesstournament.service;


import com.ifisolution.chesstournament.entity.TournamentOrganizers;
import com.ifisolution.chesstournament.repository.TournamentOrganizersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

@Service
@Transactional
public class TournamentOrganizersServiceImpl implements TournamentOrganizersService {

    @Autowired
    private TournamentOrganizersRepository tournamentOrganizersRepository;

    @Override
    public TournamentOrganizers getOne(Integer organizerId) {
        return tournamentOrganizersRepository.findById(organizerId).get();
    }

    @Override
    public Boolean delete(Integer organizerId) {
        if (tournamentOrganizersRepository.getOne(organizerId) != null) {
            tournamentOrganizersRepository.deleteById(organizerId);
            return true;
        }
        return false;
    }

    @Override
    public TournamentOrganizers create(TournamentOrganizers tournamentOrganizers) {
        return tournamentOrganizersRepository.save(tournamentOrganizers);
    }

    @Override
    public TournamentOrganizers update(TournamentOrganizers tournamentOrganizersToUpdate) {
//        TournamentOrganizers tournamentOrganizers = tournamentOrganizersRepository.getOne(tournamentOrganizersToUpdate.getOrganizerId());
//
//
//        if (tournamentOrganizersToUpdate.getOrganizerName() != null) {
//
//        }
//        if (tournamentOrganizersToUpdate.getOrganizerDetails() != null) {
//
//        }
//        return tournamentOrganizersRepository.save(tournamentOrganizers);
        return tournamentOrganizersRepository.save(tournamentOrganizersToUpdate);
    }

    @Override
    public Boolean exist(TournamentOrganizers tournamentOrganizers) {
        return tournamentOrganizersRepository.existsById(tournamentOrganizers.getOrganizerId());
    }

    @Override
    public List<TournamentOrganizers> findAll() {
        return tournamentOrganizersRepository.findAll();
    }

    @Override
    public Page<TournamentOrganizers> findAll(Pageable pageable) {
        return tournamentOrganizersRepository.findAll(pageable);
    }
}





