/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.service;


import com.ifisolution.chesstournament.entity.Players;
import com.ifisolution.chesstournament.repository.PlayersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

@Service
@Transactional
public class PlayersServiceImpl implements PlayersService {

	@Autowired
	private PlayersRepository playersRepository;

	@Override
	public Players getOne(Integer playerId) {
		return playersRepository.findById(playerId).get();
	}

	@Override
	public Boolean delete(Integer playerId) {
		if (playersRepository.getOne(playerId) != null) {
			playersRepository.deleteById(playerId);
			return true;
		}
		return false;
	}

	@Override
	public Players create(Players players) {
		return playersRepository.save(players);
	}

	@Override
	public Players update(Players playersToUpdate) {
//						Players players = playersRepository.getOne(playersToUpdate.getPlayerId());
//
//				if(playersToUpdate.getChessClubs() !=null) {
//
//		}
//				if(playersToUpdate.getFirstName() !=null) {
//
//		}
//				if(playersToUpdate.getLastName() !=null) {
//
//		}
//				if(playersToUpdate.getAddress() !=null) {
//
//		}
//				if(playersToUpdate.getPhoneNumber() !=null) {
//
//		}
//				if(playersToUpdate.getEmailAddress() !=null) {
//
//		}
//				if(playersToUpdate.getOtherPlayerDetails() !=null) {
//
//		}
//				if(playersToUpdate.getRefRankingCodes() !=null) {
//
//		}
//				return playersRepository.save(players);
		return playersRepository.save(playersToUpdate);
	}

	@Override
	public Boolean exist(Players players) {
						return playersRepository.existsById(players.getPlayerId());
																																					}

	@Override
	public List<Players> findAll() {
		return playersRepository.findAll();
	}

	@Override
	public Page<Players> findAll(Pageable pageable) {
		return playersRepository.findAll(pageable);
	}
}





