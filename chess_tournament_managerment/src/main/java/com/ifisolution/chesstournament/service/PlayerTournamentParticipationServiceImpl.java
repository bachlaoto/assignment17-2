/*
 * Created on 2018-10-04 ( Date ISO 2018-10-04 - Time 22:45:22 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package com.ifisolution.chesstournament.service;



import java.util.List;

import javax.transaction.Transactional;

import com.ifisolution.chesstournament.entity.PlayerTournamentParticipation;
import com.ifisolution.chesstournament.entity.PlayerTournamentParticipationId;
import com.ifisolution.chesstournament.repository.PlayerTournamentParticipationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@Service
@Transactional
public class PlayerTournamentParticipationServiceImpl implements PlayerTournamentParticipationService {

    @Autowired
    private PlayerTournamentParticipationRepository playerTournamentParticipationRepository;

    @Override
    public PlayerTournamentParticipation getOne(Integer playerId, Integer tournamentId) {
        PlayerTournamentParticipationId playerTournamentParticipationId = new PlayerTournamentParticipationId();
        playerTournamentParticipationId.setPlayerId(playerId);
        playerTournamentParticipationId.setTournamentId(tournamentId);
        return playerTournamentParticipationRepository.findById(playerTournamentParticipationId).get();
    }

    @Override
    public Boolean delete(Integer playerId, Integer tournamentId) {
        PlayerTournamentParticipationId playerTournamentParticipationId = new PlayerTournamentParticipationId();
        playerTournamentParticipationId.setPlayerId(playerId);
        playerTournamentParticipationId.setTournamentId(tournamentId);
        if (playerTournamentParticipationRepository.findById(playerTournamentParticipationId).get() != null) {
            playerTournamentParticipationRepository.deleteById(playerTournamentParticipationId);
            return true;
        }
        return false;
    }

    @Override
    public PlayerTournamentParticipation create(PlayerTournamentParticipation playerTournamentParticipation) {
        return playerTournamentParticipationRepository.save(playerTournamentParticipation);
    }

    @Override
    public PlayerTournamentParticipation update(PlayerTournamentParticipation playerTournamentParticipationToUpdate) {
        PlayerTournamentParticipationId playerTournamentParticipationId = new PlayerTournamentParticipationId();
        playerTournamentParticipationId.setPlayerId(playerTournamentParticipationToUpdate.getId().getPlayerId());
        playerTournamentParticipationId.setTournamentId(playerTournamentParticipationToUpdate.getId().getTournamentId());
        PlayerTournamentParticipation playerTournamentParticipation = playerTournamentParticipationRepository.findById(playerTournamentParticipationId).get();

        if (playerTournamentParticipationToUpdate.getFinalResult() != null) {

        }
        return playerTournamentParticipationRepository.save(playerTournamentParticipation);
    }

    @Override
    public Boolean exist(PlayerTournamentParticipation playerTournamentParticipation) {
        PlayerTournamentParticipationId playerTournamentParticipationId = new PlayerTournamentParticipationId();
        playerTournamentParticipationId.setPlayerId(playerTournamentParticipation.getId().getPlayerId());
        playerTournamentParticipationId.setTournamentId(playerTournamentParticipation.getId().getTournamentId());
        return playerTournamentParticipationRepository.existsById(playerTournamentParticipationId);
    }

    @Override
    public List<PlayerTournamentParticipation> findAll() {
        return playerTournamentParticipationRepository.findAll();
    }

    @Override
    public Page<PlayerTournamentParticipation> findAll(Pageable pageable) {
        return playerTournamentParticipationRepository.findAll(pageable);
    }
}




