/*
 * Created on 2018-10-05 ( Date ISO 2018-10-05 - Time 15:49:43 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.ifisolution.chesstournament.service;


import com.ifisolution.chesstournament.entity.Tournaments;
import com.ifisolution.chesstournament.repository.TournamentsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;

@Service
@Transactional
public class TournamentsServiceImpl implements TournamentsService {

	@Autowired
	private TournamentsRepository tournamentsRepository;

	@Override
	public Tournaments getOne(Integer tournamentId) {
		return tournamentsRepository.findById(tournamentId).get();
	}

	@Override
	public Boolean delete(Integer tournamentId) {
		if (tournamentsRepository.getOne(tournamentId) != null) {
			tournamentsRepository.deleteById(tournamentId);
			return true;
		}
		return false;
	}

	@Override
	public Tournaments create(Tournaments tournaments) {
		return tournamentsRepository.save(tournaments);
	}

	@Override
	public Tournaments update(Tournaments tournamentsToUpdate) {
//						Tournaments tournaments = tournamentsRepository.getOne(tournamentsToUpdate.getTournamentId());
//
//				if(tournamentsToUpdate.getTournamentStartDate() !=null) {
//
//		}
//				if(tournamentsToUpdate.getTournamentEndDate() !=null) {
//
//		}
//				if(tournamentsToUpdate.getTournamentName() !=null) {
//
//		}
//				if(tournamentsToUpdate.getTournamentDetails() !=null) {
//
//		}
//				if(tournamentsToUpdate.getTournamentOrganizers() !=null) {
//
//		}
//				return tournamentsRepository.save(tournaments);
		return tournamentsRepository.save(tournamentsToUpdate);
	}

	@Override
	public Boolean exist(Tournaments tournaments) {
						return tournamentsRepository.existsById(tournaments.getTournamentId());
																									}

	@Override
	public List<Tournaments> findAll() {
		return tournamentsRepository.findAll();
	}

	@Override
	public Page<Tournaments> findAll(Pageable pageable) {
		return tournamentsRepository.findAll(pageable);
	}
}





